# qa/1080 and qa/490 and qa/386 and qa/459 on Fedora 29
# at 0x483880B: malloc (vg_replace_malloc.c:299)
# by 0x4A0D490: tsearch (in /usr/lib64/libc-2.28.so)
# by 0x4871EA6: __pmFindPDUBuf (pdubuf.c:126)
# ...
{
   tsearch
   Memcheck:Leak
   match-leak-kinds: possible
   fun:malloc
   fun:tsearch
   fun:__pmFindPDUBuf
   ...
}

# qa/1080 and qa/490 and qa/386 and qa/459 on Fedora 29
# at 0x483880B: malloc (vg_replace_malloc.c:299)
# by 0x4871E5F: __pmFindPDUBuf (pdubuf.c:115)
# ...
{
   findpdubuf
   Memcheck:Leak
   match-leak-kinds: possible
   fun:malloc
   fun:__pmFindPDUBuf
   ...
}

# Previously seen as:
# qa/681 on vm02 ... this one goes away when you compile w/out -O2,
# so probably bogus
#
# Now also seen on vm24 (OpenSuSE 15.1).
#
# at 0x4C2E08F: malloc (in /usr/lib64/valgrind/vgpreload_memcheck-amd64-linux.so)
# by 0x5163219: strdup (in /lib64/libc-2.26.so)
# by 0x4E9B742: __pmProcessAddArg (exec.c:167)
# by 0x4012E5: main (exectest.c:97)
{
   processaddarg_bogus
   Memcheck:Leak
   match-leak-kinds: possible
   fun:malloc
   fun:strdup
   fun:__pmProcessAddArg
   fun:main
}

# Seen in qa/720 on vm24 (OpenSuSE Leap 15.1) ... not our code at all
#
# Conditional jump or move depends on uninitialised value(s)
# at 0x4C34F06: bcmp (in /usr/lib64/valgrind/vgpreload_memcheck-amd64-linux.so)
# by 0xADFF08A: ??? (in /usr/lib64/libcrypto.so.1.1)
# by 0xADFE235: FIPS_selftest (in /usr/lib64/libcrypto.so.1.1)
# by 0xADF909C: ??? (in /usr/lib64/libcrypto.so.1.1)
# by 0xAE0CFE0: FIPS_mode_set (in /usr/lib64/libcrypto.so.1.1)
# by 0xAD1216A: ??? (in /usr/lib64/libcrypto.so.1.1)
# by 0x400FBF9: call_init.part.0 (in /lib64/ld-2.26.so)
# by 0x400FD05: _dl_init (in /lib64/ld-2.26.so)
# by 0x4014488: dl_open_worker (in /lib64/ld-2.26.so)
# by 0x5217F43: _dl_catch_error (in /lib64/libc-2.26.so)
# by 0x4013C08: _dl_open (in /lib64/ld-2.26.so)
# by 0x6A2EF95: dlopen_doit (in /lib64/libdl-2.26.so)
#
{
   libcrypto initialize botch-0
   Memcheck:Cond
   ...
   obj:/usr/lib64/libcrypto.so.1.1
   fun:FIPS_selftest
   obj:/usr/lib64/libcrypto.so.1.1
   fun:FIPS_mode_set
   obj:/usr/lib64/libcrypto.so.1.1
   fun:call_init.part.0
   fun:_dl_init
   fun:dl_open_worker
   fun:_dl_catch_error
   fun:_dl_open
   fun:dlopen_doit
   ...
}

# and same failing test as above, different call stack
# Conditional jump or move depends on uninitialised value(s)
# at 0xADF90A1: ??? (in /usr/lib64/libcrypto.so.1.1)
# by 0xAE0CFE0: FIPS_mode_set (in /usr/lib64/libcrypto.so.1.1)
# by 0xAD1216A: ??? (in /usr/lib64/libcrypto.so.1.1)
# by 0x400FBF9: call_init.part.0 (in /lib64/ld-2.26.so)
# by 0x400FD05: _dl_init (in /lib64/ld-2.26.so)
# by 0x4014488: dl_open_worker (in /lib64/ld-2.26.so)
# by 0x5217F43: _dl_catch_error (in /lib64/libc-2.26.so)
# by 0x4013C08: _dl_open (in /lib64/ld-2.26.so)
# by 0x6A2EF95: dlopen_doit (in /lib64/libdl-2.26.so)
# by 0x5217F43: _dl_catch_error (in /lib64/libc-2.26.so)
# by 0x6A2F664: _dlerror_run (in /lib64/libdl-2.26.so)
# by 0x6A2F020: dlopen@@GLIBC_2.2.5 (in /lib64/libdl-2.26.so)
{
   libcrypto initialize botch-1
   Memcheck:Cond
   obj:/usr/lib64/libcrypto.so.1.1
   fun:FIPS_mode_set
   obj:/usr/lib64/libcrypto.so.1.1
   fun:call_init.part.0
   fun:_dl_init
   fun:dl_open_worker
   fun:_dl_catch_error
   fun:_dl_open
   fun:dlopen_doit
   ...
}

# qa/720 on vm24 (openSUSE Leap 15.1)
# qa/720 on ubuntu2004-direct in CI
# at 0x4C2CE5F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
# by 0x5C4AFA2: sasl_client_new (in /usr/lib/libsasl2.so.3.0.0)
# by 0x4E9C5EA: __pmSecureClientIPCFlags (secureconnect.c:949)
# by 0x4E9C5EA: __pmSecureClientHandshake (secureconnect.c:1230)
# by 0x4E4E5AD: attributes_handshake (connect.c:205)
# by 0x4E4E5AD: __pmConnectHandshake (connect.c:306)
# by 0x4E4EDD0: __pmConnectPMCD (connect.c:465)
# by 0x4E51668: pmNewContext (context.c:1131)
# by 0x10A45B: main (pminfo.c:877)
{
   sasl_client_new
   Memcheck:Leak
   match-leak-kinds: definite
   fun:malloc
   fun:sasl_client_new
   ...
   fun:pmNewContext
   ...
}

# qa/1293 on bozo and vm29 ... this pmlc-only code path has been
# triaged up the wazoo and I can't see where the uninitialized data
# comes from (and memset(.., 0, ..) the whole PDU buffer does not make
# the valgrind error go away.  Even if there is uninitialized data
# the sender (pmlc) and receiver (pmlogger) agree on the over-the-wire
# protocol
# Syscall param socketcall.sendto(msg) points to uninitialised byte(s)
# at 0x4A66690: send (send.c:28)
# by 0x49003BE: __pmSend (secureconnect.c:1571)
# by 0x489CD59: __pmXmitPDU (pdu.c:406)
# by 0x48D7CDC: __pmSendLogControl (p_lcontrol.c:98)
# by 0x48D950E: __pmControlLog (logcontrol.c:36)
# by 0x10DF30: LogCtl (actions.c:399)
# by 0x10B674: main (pmlc.c:374)
# Address 0x519d6a8 is 56 bytes inside a block of size 76 alloc'd
# at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
# by 0x489D9DE: __pmFindPDUBuf (pdubuf.c:115)
# by 0x48D7B21: __pmSendLogControl (p_lcontrol.c:69)
# by 0x48D950E: __pmControlLog (logcontrol.c:36)
# by 0x10DF30: LogCtl (actions.c:399)
# ...
{
   __pmXmitPDU buffer for p_lcontrol.c
   Memcheck:Param
   socketcall.sendto(msg)
   fun:send
   fun:__pmSend
   fun:__pmXmitPDU
   fun:__pmSendLogControl
   fun:__pmControlLog
   ...
}

# qa/1695 and qa/1696 on vm04 (CentOS Linux8.2.2004)
# this appears to be an issue for libuv, not PCP
# Syscall param epoll_ctl(event) points to uninitialised byte(s)
# at 0x685586E: epoll_ctl (in /usr/lib64/libc-2.28.so)
# by 0x5A541D0: uv__io_poll (in /usr/lib64/libuv.so.1.0.0)
# by 0x5A45AF4: uv_run (in /usr/lib64/libuv.so.1.0.0)
# by 0x112351: main_loop (server.c:860)
# by 0x111905: main (pmproxy.c:467)
# Address 0x1ffeffb45c is on thread 1's stack
# in frame #1, created by uv__io_poll (???:)
{
   libuv poll()
   Memcheck:Param
   epoll_ctl(event)
   fun:epoll_ctl
   fun:uv__io_poll
   fun:uv_run
   ...
}

# qa/720 on test-ubuntu2004-direct
# Conditional jump or move depends on uninitialised value(s)
# at 0x4D02AC8: sasl_strlower (in /usr/lib/x86_64-linux-gnu/libsasl2.so.2.0.25)
# by 0x4D02B22: ??? (in /usr/lib/x86_64-linux-gnu/libsasl2.so.2.0.25)
# by 0x4CFC291: sasl_client_new (in /usr/lib/x86_64-linux-gnu/libsasl2.so.2.0.25)
# by 0x48D000C: __pmSecureClientHandshake (in /usr/lib/libpcp.so.3)
# by 0x4877432: ??? (in /usr/lib/libpcp.so.3)
# by 0x4877D00: ??? (in /usr/lib/libpcp.so.3)
# by 0x487ACAA: pmNewContext (in /usr/lib/libpcp.so.3)
# by 0x10AF80: ??? (in /usr/bin/pminfo)
# by 0x49390B2: (below main) (libc-start.c:308)
{
   sasl_strlower()
   Memcheck:Cond
   fun:sasl_strlower
   ...
   fun:sasl_client_new
   fun:__pmSecureClientHandshake
   ...
   fun:pmNewContext
   ...
}

# qa/720 on test-ubuntu2004-direct
# Conditional jump or move depends on uninitialised value(s)
# at 0x483F0B7: strcpy (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
# by 0x4CFDFAD: ??? (in /usr/lib/x86_64-linux-gnu/libsasl2.so.2.0.25)
# by 0x4CFC2AA: sasl_client_new (in /usr/lib/x86_64-linux-gnu/libsasl2.so.2.0.25)
# by 0x48D000C: __pmSecureClientHandshake (in /usr/lib/libpcp.so.3)
# by 0x4877432: ??? (in /usr/lib/libpcp.so.3)
# by 0x4877D00: ??? (in /usr/lib/libpcp.so.3)
# by 0x487ACAA: pmNewContext (in /usr/lib/libpcp.so.3)
# by 0x10AF80: ??? (in /usr/bin/pminfo)
# by 0x49390B2: (below main) (libc-start.c:308)
{
   sasl_client_new + strcpy
   Memcheck:Cond
   fun:strcpy
   ...
   fun:sasl_client_new
   fun:__pmSecureClientHandshake
   ...
   fun:pmNewContext
   ...
}

