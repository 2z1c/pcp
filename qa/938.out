QA output created by 938
pmRegisterDerived: name="event.flags" expr="anon(PM_TYPE_U32)"
derive_lex() -> type=L_ANON "anon"
derive_lex() -> type=L_LPAREN "("
derive_lex() -> type=L_NAME "PM_TYPE_U32"
derive_lex() -> type=L_RPAREN ")"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[0] event.flags = anon(PM_TYPE_U32)
Derived metric expr dump from <addr-0>...
expr node <addr-0> type=ANON left=<addr-1> right=(nil) save_last=0
expr node <addr-1> type=INTEGER left=(nil) right=(nil) save_last=0 [PM_TYPE_U32] primary=1
pmRegisterDerived: name="event.missed" expr="anon(PM_TYPE_U32)"
derive_lex() -> type=L_ANON "anon"
derive_lex() -> type=L_LPAREN "("
derive_lex() -> type=L_NAME "PM_TYPE_U32"
derive_lex() -> type=L_RPAREN ")"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[1] event.missed = anon(PM_TYPE_U32)
Derived metric expr dump from <addr-2>...
expr node <addr-2> type=ANON left=<addr-3> right=(nil) save_last=0
expr node <addr-3> type=INTEGER left=(nil) right=(nil) save_last=0 [PM_TYPE_U32] primary=1
Derived metric initialization from $PCP_DERIVED_CONFIG
pmLoadDerivedConfig("TMP.config")
pmRegisterDerived: name="a.m1" expr="sample.long.one == 1 ? sample.ulonglong.ten : sample.ulonglong.hundred"
derive_lex() -> type=L_NAME "sample.long.one"
derive_lex() -> type=L_EQ "=="
derive_lex() -> type=L_INTEGER "1"
derive_lex() -> type=L_QUEST "?"
derive_lex() -> type=L_NAME "sample.ulonglong.ten"
derive_lex() -> type=L_COLON ":"
derive_lex() -> type=L_NAME "sample.ulonglong.hundred"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[2] a.m1 = sample.long.one == 1 ? sample.ulonglong.ten : sample.ulonglong.hundred
Derived metric expr dump from <addr-4>...
expr node <addr-4> type=QUEST left=<addr-5> right=<addr-8> save_last=0
expr node <addr-5> type=EQ left=<addr-6> right=<addr-7> save_last=0
expr node <addr-6> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.one] primary=1
expr node <addr-7> type=INTEGER left=(nil) right=(nil) save_last=0 [1] primary=1
expr node <addr-8> type=COLON left=<addr-9> right=<addr-10> save_last=0
expr node <addr-9> type=NAME left=(nil) right=(nil) save_last=0 [sample.ulonglong.ten] primary=1
expr node <addr-10> type=NAME left=(nil) right=(nil) save_last=0 [sample.ulonglong.hundred] primary=1
pmRegisterDerived: name="a.m2" expr="sample.long.one != 1 ? sample.ulonglong.ten : sample.ulonglong.hundred"
derive_lex() -> type=L_NAME "sample.long.one"
derive_lex() -> type=L_NEQ "!="
derive_lex() -> type=L_INTEGER "1"
derive_lex() -> type=L_QUEST "?"
derive_lex() -> type=L_NAME "sample.ulonglong.ten"
derive_lex() -> type=L_COLON ":"
derive_lex() -> type=L_NAME "sample.ulonglong.hundred"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[3] a.m2 = sample.long.one != 1 ? sample.ulonglong.ten : sample.ulonglong.hundred
Derived metric expr dump from <addr-11>...
expr node <addr-11> type=QUEST left=<addr-12> right=<addr-15> save_last=0
expr node <addr-12> type=NEQ left=<addr-13> right=<addr-14> save_last=0
expr node <addr-13> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.one] primary=1
expr node <addr-14> type=INTEGER left=(nil) right=(nil) save_last=0 [1] primary=1
expr node <addr-15> type=COLON left=<addr-16> right=<addr-17> save_last=0
expr node <addr-16> type=NAME left=(nil) right=(nil) save_last=0 [sample.ulonglong.ten] primary=1
expr node <addr-17> type=NAME left=(nil) right=(nil) save_last=0 [sample.ulonglong.hundred] primary=1
pmRegisterDerived: name="a.m3" expr="sample.bin > 400 ? sample.bin-sample.bin : sample.bin"
derive_lex() -> type=L_NAME "sample.bin"
derive_lex() -> type=L_GT ">"
derive_lex() -> type=L_INTEGER "400"
derive_lex() -> type=L_QUEST "?"
derive_lex() -> type=L_NAME "sample.bin"
derive_lex() -> type=L_MINUS "-"
derive_lex() -> type=L_NAME "sample.bin"
derive_lex() -> type=L_COLON ":"
derive_lex() -> type=L_NAME "sample.bin"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[4] a.m3 = sample.bin > 400 ? sample.bin-sample.bin : sample.bin
Derived metric expr dump from <addr-18>...
expr node <addr-18> type=QUEST left=<addr-19> right=<addr-22> save_last=0
expr node <addr-19> type=GT left=<addr-20> right=<addr-21> save_last=0
expr node <addr-20> type=NAME left=(nil) right=(nil) save_last=0 [sample.bin] primary=1
expr node <addr-21> type=INTEGER left=(nil) right=(nil) save_last=0 [400] primary=1
expr node <addr-22> type=COLON left=<addr-23> right=<addr-26> save_last=0
expr node <addr-23> type=MINUS left=<addr-24> right=<addr-25> save_last=0
expr node <addr-24> type=NAME left=(nil) right=(nil) save_last=0 [sample.bin] primary=1
expr node <addr-25> type=NAME left=(nil) right=(nil) save_last=0 [sample.bin] primary=1
expr node <addr-26> type=NAME left=(nil) right=(nil) save_last=0 [sample.bin] primary=1
pmRegisterDerived: name="a.m4" expr="sample.bin > 400 ? sample.long.ten : sample.bin"
derive_lex() -> type=L_NAME "sample.bin"
derive_lex() -> type=L_GT ">"
derive_lex() -> type=L_INTEGER "400"
derive_lex() -> type=L_QUEST "?"
derive_lex() -> type=L_NAME "sample.long.ten"
derive_lex() -> type=L_COLON ":"
derive_lex() -> type=L_NAME "sample.bin"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[5] a.m4 = sample.bin > 400 ? sample.long.ten : sample.bin
Derived metric expr dump from <addr-27>...
expr node <addr-27> type=QUEST left=<addr-28> right=<addr-31> save_last=0
expr node <addr-28> type=GT left=<addr-29> right=<addr-30> save_last=0
expr node <addr-29> type=NAME left=(nil) right=(nil) save_last=0 [sample.bin] primary=1
expr node <addr-30> type=INTEGER left=(nil) right=(nil) save_last=0 [400] primary=1
expr node <addr-31> type=COLON left=<addr-32> right=<addr-33> save_last=0
expr node <addr-32> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.ten] primary=1
expr node <addr-33> type=NAME left=(nil) right=(nil) save_last=0 [sample.bin] primary=1
pmRegisterDerived: name="a.m5" expr="sample.long.one < 0 ? sample.bin-sample.bin : sample.bin"
derive_lex() -> type=L_NAME "sample.long.one"
derive_lex() -> type=L_LT "<"
derive_lex() -> type=L_INTEGER "0"
derive_lex() -> type=L_QUEST "?"
derive_lex() -> type=L_NAME "sample.bin"
derive_lex() -> type=L_MINUS "-"
derive_lex() -> type=L_NAME "sample.bin"
derive_lex() -> type=L_COLON ":"
derive_lex() -> type=L_NAME "sample.bin"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[6] a.m5 = sample.long.one < 0 ? sample.bin-sample.bin : sample.bin
Derived metric expr dump from <addr-34>...
expr node <addr-34> type=QUEST left=<addr-35> right=<addr-38> save_last=0
expr node <addr-35> type=LT left=<addr-36> right=<addr-37> save_last=0
expr node <addr-36> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.one] primary=1
expr node <addr-37> type=INTEGER left=(nil) right=(nil) save_last=0 [0] primary=1
expr node <addr-38> type=COLON left=<addr-39> right=<addr-42> save_last=0
expr node <addr-39> type=MINUS left=<addr-40> right=<addr-41> save_last=0
expr node <addr-40> type=NAME left=(nil) right=(nil) save_last=0 [sample.bin] primary=1
expr node <addr-41> type=NAME left=(nil) right=(nil) save_last=0 [sample.bin] primary=1
expr node <addr-42> type=NAME left=(nil) right=(nil) save_last=0 [sample.bin] primary=1
pmRegisterDerived: name="a.m6" expr="sample.bin!=100 && sample.bin!=900 && sample.bin!=500 ? sample.long.ten : sample.bin"
derive_lex() -> type=L_NAME "sample.bin"
derive_lex() -> type=L_NEQ "!="
derive_lex() -> type=L_INTEGER "100"
derive_lex() -> type=L_AND "&&"
derive_lex() -> type=L_NAME "sample.bin"
derive_lex() -> type=L_NEQ "!="
derive_lex() -> type=L_INTEGER "900"
derive_lex() -> type=L_AND "&&"
derive_lex() -> type=L_NAME "sample.bin"
derive_lex() -> type=L_NEQ "!="
derive_lex() -> type=L_INTEGER "500"
derive_lex() -> type=L_QUEST "?"
derive_lex() -> type=L_NAME "sample.long.ten"
derive_lex() -> type=L_COLON ":"
derive_lex() -> type=L_NAME "sample.bin"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[7] a.m6 = sample.bin!=100 && sample.bin!=900 && sample.bin!=500 ? sample.long.ten : sample.bin
Derived metric expr dump from <addr-43>...
expr node <addr-43> type=QUEST left=<addr-44> right=<addr-55> save_last=0
expr node <addr-44> type=AND left=<addr-45> right=<addr-52> save_last=0
expr node <addr-45> type=AND left=<addr-46> right=<addr-49> save_last=0
expr node <addr-46> type=NEQ left=<addr-47> right=<addr-48> save_last=0
expr node <addr-47> type=NAME left=(nil) right=(nil) save_last=0 [sample.bin] primary=1
expr node <addr-48> type=INTEGER left=(nil) right=(nil) save_last=0 [100] primary=1
expr node <addr-49> type=NEQ left=<addr-50> right=<addr-51> save_last=0
expr node <addr-50> type=NAME left=(nil) right=(nil) save_last=0 [sample.bin] primary=1
expr node <addr-51> type=INTEGER left=(nil) right=(nil) save_last=0 [900] primary=1
expr node <addr-52> type=NEQ left=<addr-53> right=<addr-54> save_last=0
expr node <addr-53> type=NAME left=(nil) right=(nil) save_last=0 [sample.bin] primary=1
expr node <addr-54> type=INTEGER left=(nil) right=(nil) save_last=0 [500] primary=1
expr node <addr-55> type=COLON left=<addr-56> right=<addr-57> save_last=0
expr node <addr-56> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.ten] primary=1
expr node <addr-57> type=NAME left=(nil) right=(nil) save_last=0 [sample.bin] primary=1
pmRegisterDerived: name="a.m7" expr="sample.bin==100 || sample.bin==900 || sample.bin==500 ? sample.bin : sample.long.ten"
derive_lex() -> type=L_NAME "sample.bin"
derive_lex() -> type=L_EQ "=="
derive_lex() -> type=L_INTEGER "100"
derive_lex() -> type=L_OR "||"
derive_lex() -> type=L_NAME "sample.bin"
derive_lex() -> type=L_EQ "=="
derive_lex() -> type=L_INTEGER "900"
derive_lex() -> type=L_OR "||"
derive_lex() -> type=L_NAME "sample.bin"
derive_lex() -> type=L_EQ "=="
derive_lex() -> type=L_INTEGER "500"
derive_lex() -> type=L_QUEST "?"
derive_lex() -> type=L_NAME "sample.bin"
derive_lex() -> type=L_COLON ":"
derive_lex() -> type=L_NAME "sample.long.ten"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[8] a.m7 = sample.bin==100 || sample.bin==900 || sample.bin==500 ? sample.bin : sample.long.ten
Derived metric expr dump from <addr-58>...
expr node <addr-58> type=QUEST left=<addr-59> right=<addr-70> save_last=0
expr node <addr-59> type=OR left=<addr-60> right=<addr-67> save_last=0
expr node <addr-60> type=OR left=<addr-61> right=<addr-64> save_last=0
expr node <addr-61> type=EQ left=<addr-62> right=<addr-63> save_last=0
expr node <addr-62> type=NAME left=(nil) right=(nil) save_last=0 [sample.bin] primary=1
expr node <addr-63> type=INTEGER left=(nil) right=(nil) save_last=0 [100] primary=1
expr node <addr-64> type=EQ left=<addr-65> right=<addr-66> save_last=0
expr node <addr-65> type=NAME left=(nil) right=(nil) save_last=0 [sample.bin] primary=1
expr node <addr-66> type=INTEGER left=(nil) right=(nil) save_last=0 [900] primary=1
expr node <addr-67> type=EQ left=<addr-68> right=<addr-69> save_last=0
expr node <addr-68> type=NAME left=(nil) right=(nil) save_last=0 [sample.bin] primary=1
expr node <addr-69> type=INTEGER left=(nil) right=(nil) save_last=0 [500] primary=1
expr node <addr-70> type=COLON left=<addr-71> right=<addr-72> save_last=0
expr node <addr-71> type=NAME left=(nil) right=(nil) save_last=0 [sample.bin] primary=1
expr node <addr-72> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.ten] primary=1
pmRegisterDerived: name="a.m8" expr="delta(disk.all.read_bytes) + delta(disk.all.write_bytes) == 0 ? mkconst(0, type="double", semantics="instant") : 100 * (delta(sample.byte_ctr) + delta(sample.kbyte_ctr) - delta(sampledso.byte_ctr)) / (delta(disk.all.read_bytes) + delta(disk.all.write_bytes))"
derive_lex() -> type=L_DELTA "delta"
derive_lex() -> type=L_LPAREN "("
derive_lex() -> type=L_NAME "disk.all.read_bytes"
derive_lex() -> type=L_RPAREN ")"
derive_lex() -> type=L_PLUS "+"
derive_lex() -> type=L_DELTA "delta"
derive_lex() -> type=L_LPAREN "("
derive_lex() -> type=L_NAME "disk.all.write_bytes"
derive_lex() -> type=L_RPAREN ")"
derive_lex() -> type=L_EQ "=="
derive_lex() -> type=L_INTEGER "0"
derive_lex() -> type=L_QUEST "?"
derive_lex() -> type=L_MKCONST "mkconst"
derive_lex() -> type=L_LPAREN "("
derive_lex() -> type=L_INTEGER "0"
derive_lex() -> type=L_COMMA ","
derive_lex() -> type=L_TYPE "type"
derive_lex() -> type=L_ASSIGN "="
derive_lex() -> type=L_STRING "double"
derive_lex() -> type=L_COMMA ","
derive_lex() -> type=L_SEMANTICS "semantics"
derive_lex() -> type=L_ASSIGN "="
derive_lex() -> type=L_STRING "instant"
derive_lex() -> type=L_RPAREN ")"
derive_lex() -> type=L_COLON ":"
derive_lex() -> type=L_INTEGER "100"
derive_lex() -> type=L_STAR "*"
derive_lex() -> type=L_LPAREN "("
derive_lex() -> type=L_DELTA "delta"
derive_lex() -> type=L_LPAREN "("
derive_lex() -> type=L_NAME "sample.byte_ctr"
derive_lex() -> type=L_RPAREN ")"
derive_lex() -> type=L_PLUS "+"
derive_lex() -> type=L_DELTA "delta"
derive_lex() -> type=L_LPAREN "("
derive_lex() -> type=L_NAME "sample.kbyte_ctr"
derive_lex() -> type=L_RPAREN ")"
derive_lex() -> type=L_MINUS "-"
derive_lex() -> type=L_DELTA "delta"
derive_lex() -> type=L_LPAREN "("
derive_lex() -> type=L_NAME "sampledso.byte_ctr"
derive_lex() -> type=L_RPAREN ")"
derive_lex() -> type=L_RPAREN ")"
derive_lex() -> type=L_SLASH "/"
derive_lex() -> type=L_LPAREN "("
derive_lex() -> type=L_DELTA "delta"
derive_lex() -> type=L_LPAREN "("
derive_lex() -> type=L_NAME "disk.all.read_bytes"
derive_lex() -> type=L_RPAREN ")"
derive_lex() -> type=L_PLUS "+"
derive_lex() -> type=L_DELTA "delta"
derive_lex() -> type=L_LPAREN "("
derive_lex() -> type=L_NAME "disk.all.write_bytes"
derive_lex() -> type=L_RPAREN ")"
derive_lex() -> type=L_RPAREN ")"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[9] a.m8 = delta(disk.all.read_bytes) + delta(disk.all.write_bytes) == 0 ? mkconst(0, type="double", semantics="instant") : 100 * (delta(sample.byte_ctr) + delta(sample.kbyte_ctr) - delta(sampledso.byte_ctr)) / (delta(disk.all.read_bytes) + delta(disk.all.write_bytes))
Derived metric expr dump from <addr-73>...
expr node <addr-73> type=QUEST left=<addr-74> right=<addr-81> save_last=0
expr node <addr-74> type=EQ left=<addr-75> right=<addr-80> save_last=0
expr node <addr-75> type=PLUS left=<addr-76> right=<addr-78> save_last=0
expr node <addr-76> type=DELTA left=<addr-77> right=(nil) save_last=0
expr node <addr-77> type=NAME left=(nil) right=(nil) save_last=1 [disk.all.read_bytes] primary=1
expr node <addr-78> type=DELTA left=<addr-79> right=(nil) save_last=0
expr node <addr-79> type=NAME left=(nil) right=(nil) save_last=1 [disk.all.write_bytes] primary=1
expr node <addr-80> type=INTEGER left=(nil) right=(nil) save_last=0 [0] primary=1
expr node <addr-81> type=COLON left=<addr-82> right=<addr-83> save_last=0
expr node <addr-82> type=INTEGER left=(nil) right=(nil) save_last=0 [0] primary=1
expr node <addr-83> type=SLASH left=<addr-84> right=<addr-94> save_last=0
expr node <addr-84> type=STAR left=<addr-85> right=<addr-86> save_last=0
expr node <addr-85> type=INTEGER left=(nil) right=(nil) save_last=0 [100] primary=1
expr node <addr-86> type=MINUS left=<addr-87> right=<addr-92> save_last=0
expr node <addr-87> type=PLUS left=<addr-88> right=<addr-90> save_last=0
expr node <addr-88> type=DELTA left=<addr-89> right=(nil) save_last=0
expr node <addr-89> type=NAME left=(nil) right=(nil) save_last=1 [sample.byte_ctr] primary=1
expr node <addr-90> type=DELTA left=<addr-91> right=(nil) save_last=0
expr node <addr-91> type=NAME left=(nil) right=(nil) save_last=1 [sample.kbyte_ctr] primary=1
expr node <addr-92> type=DELTA left=<addr-93> right=(nil) save_last=0
expr node <addr-93> type=NAME left=(nil) right=(nil) save_last=1 [sampledso.byte_ctr] primary=1
expr node <addr-94> type=PLUS left=<addr-95> right=<addr-97> save_last=0
expr node <addr-95> type=DELTA left=<addr-96> right=(nil) save_last=0
expr node <addr-96> type=NAME left=(nil) right=(nil) save_last=1 [disk.all.read_bytes] primary=1
expr node <addr-97> type=DELTA left=<addr-98> right=(nil) save_last=0
expr node <addr-98> type=NAME left=(nil) right=(nil) save_last=1 [disk.all.write_bytes] primary=1
pmRegisterDerived: name="a.err.m1" expr="sample.bin > 400 ? sample.longlong.ten : sample.bin"
derive_lex() -> type=L_NAME "sample.bin"
derive_lex() -> type=L_GT ">"
derive_lex() -> type=L_INTEGER "400"
derive_lex() -> type=L_QUEST "?"
derive_lex() -> type=L_NAME "sample.longlong.ten"
derive_lex() -> type=L_COLON ":"
derive_lex() -> type=L_NAME "sample.bin"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[10] a.err.m1 = sample.bin > 400 ? sample.longlong.ten : sample.bin
Derived metric expr dump from <addr-99>...
expr node <addr-99> type=QUEST left=<addr-100> right=<addr-103> save_last=0
expr node <addr-100> type=GT left=<addr-101> right=<addr-102> save_last=0
expr node <addr-101> type=NAME left=(nil) right=(nil) save_last=0 [sample.bin] primary=1
expr node <addr-102> type=INTEGER left=(nil) right=(nil) save_last=0 [400] primary=1
expr node <addr-103> type=COLON left=<addr-104> right=<addr-105> save_last=0
expr node <addr-104> type=NAME left=(nil) right=(nil) save_last=0 [sample.longlong.ten] primary=1
expr node <addr-105> type=NAME left=(nil) right=(nil) save_last=0 [sample.bin] primary=1
pmRegisterDerived: name="a.err.m2" expr="sample.long.one ? sample.byte_ctr : sample.kbyte_ctr"
derive_lex() -> type=L_NAME "sample.long.one"
derive_lex() -> type=L_QUEST "?"
derive_lex() -> type=L_NAME "sample.byte_ctr"
derive_lex() -> type=L_COLON ":"
derive_lex() -> type=L_NAME "sample.kbyte_ctr"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[11] a.err.m2 = sample.long.one ? sample.byte_ctr : sample.kbyte_ctr
Derived metric expr dump from <addr-106>...
expr node <addr-106> type=QUEST left=<addr-107> right=<addr-108> save_last=0
expr node <addr-107> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.one] primary=1
expr node <addr-108> type=COLON left=<addr-109> right=<addr-110> save_last=0
expr node <addr-109> type=NAME left=(nil) right=(nil) save_last=0 [sample.byte_ctr] primary=1
expr node <addr-110> type=NAME left=(nil) right=(nil) save_last=0 [sample.kbyte_ctr] primary=1
pmRegisterDerived: name="a.err.m3" expr="sample.long.one ? sample.bin : sample.lights"
derive_lex() -> type=L_NAME "sample.long.one"
derive_lex() -> type=L_QUEST "?"
derive_lex() -> type=L_NAME "sample.bin"
derive_lex() -> type=L_COLON ":"
derive_lex() -> type=L_NAME "sample.lights"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[12] a.err.m3 = sample.long.one ? sample.bin : sample.lights
Derived metric expr dump from <addr-111>...
expr node <addr-111> type=QUEST left=<addr-112> right=<addr-113> save_last=0
expr node <addr-112> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.one] primary=1
expr node <addr-113> type=COLON left=<addr-114> right=<addr-115> save_last=0
expr node <addr-114> type=NAME left=(nil) right=(nil) save_last=0 [sample.bin] primary=1
expr node <addr-115> type=NAME left=(nil) right=(nil) save_last=0 [sample.lights] primary=1
pmRegisterDerived: name="a.err.m4" expr="sample.long.one ? sample.bin : sample.colour"
derive_lex() -> type=L_NAME "sample.long.one"
derive_lex() -> type=L_QUEST "?"
derive_lex() -> type=L_NAME "sample.bin"
derive_lex() -> type=L_COLON ":"
derive_lex() -> type=L_NAME "sample.colour"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[13] a.err.m4 = sample.long.one ? sample.bin : sample.colour
Derived metric expr dump from <addr-116>...
expr node <addr-116> type=QUEST left=<addr-117> right=<addr-118> save_last=0
expr node <addr-117> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.one] primary=1
expr node <addr-118> type=COLON left=<addr-119> right=<addr-120> save_last=0
expr node <addr-119> type=NAME left=(nil) right=(nil) save_last=0 [sample.bin] primary=1
expr node <addr-120> type=NAME left=(nil) right=(nil) save_last=0 [sample.colour] primary=1
pmRegisterDerived: name="a.err.m5" expr="sample.long.one ? sample.seconds : sample.ulong.ten"
derive_lex() -> type=L_NAME "sample.long.one"
derive_lex() -> type=L_QUEST "?"
derive_lex() -> type=L_NAME "sample.seconds"
derive_lex() -> type=L_COLON ":"
derive_lex() -> type=L_NAME "sample.ulong.ten"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[14] a.err.m5 = sample.long.one ? sample.seconds : sample.ulong.ten
Derived metric expr dump from <addr-121>...
expr node <addr-121> type=QUEST left=<addr-122> right=<addr-123> save_last=0
expr node <addr-122> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.one] primary=1
expr node <addr-123> type=COLON left=<addr-124> right=<addr-125> save_last=0
expr node <addr-124> type=NAME left=(nil) right=(nil) save_last=0 [sample.seconds] primary=1
expr node <addr-125> type=NAME left=(nil) right=(nil) save_last=0 [sample.ulong.ten] primary=1
pmRegisterDerived: name="a.err.m6" expr="sample.long.one ? sample.byte_rate : sample.byte_rate_perhour"
derive_lex() -> type=L_NAME "sample.long.one"
derive_lex() -> type=L_QUEST "?"
derive_lex() -> type=L_NAME "sample.byte_rate"
derive_lex() -> type=L_COLON ":"
derive_lex() -> type=L_NAME "sample.byte_rate_perhour"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[15] a.err.m6 = sample.long.one ? sample.byte_rate : sample.byte_rate_perhour
Derived metric expr dump from <addr-126>...
expr node <addr-126> type=QUEST left=<addr-127> right=<addr-128> save_last=0
expr node <addr-127> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.one] primary=1
expr node <addr-128> type=COLON left=<addr-129> right=<addr-130> save_last=0
expr node <addr-129> type=NAME left=(nil) right=(nil) save_last=0 [sample.byte_rate] primary=1
expr node <addr-130> type=NAME left=(nil) right=(nil) save_last=0 [sample.byte_rate_perhour] primary=1
pmRegisterDerived: name="a.err.m7" expr="sample.long.one ? sample.long.hundred : sample.step"
derive_lex() -> type=L_NAME "sample.long.one"
derive_lex() -> type=L_QUEST "?"
derive_lex() -> type=L_NAME "sample.long.hundred"
derive_lex() -> type=L_COLON ":"
derive_lex() -> type=L_NAME "sample.step"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[16] a.err.m7 = sample.long.one ? sample.long.hundred : sample.step
Derived metric expr dump from <addr-131>...
expr node <addr-131> type=QUEST left=<addr-132> right=<addr-133> save_last=0
expr node <addr-132> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.one] primary=1
expr node <addr-133> type=COLON left=<addr-134> right=<addr-135> save_last=0
expr node <addr-134> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.hundred] primary=1
expr node <addr-135> type=NAME left=(nil) right=(nil) save_last=0 [sample.step] primary=1
pmRegisterDerived: name="a.err.m8" expr="sample.colour > 200 ? sample.ulong.hundred : sample.ulong.ten"
derive_lex() -> type=L_NAME "sample.colour"
derive_lex() -> type=L_GT ">"
derive_lex() -> type=L_INTEGER "200"
derive_lex() -> type=L_QUEST "?"
derive_lex() -> type=L_NAME "sample.ulong.hundred"
derive_lex() -> type=L_COLON ":"
derive_lex() -> type=L_NAME "sample.ulong.ten"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[17] a.err.m8 = sample.colour > 200 ? sample.ulong.hundred : sample.ulong.ten
Derived metric expr dump from <addr-136>...
expr node <addr-136> type=QUEST left=<addr-137> right=<addr-140> save_last=0
expr node <addr-137> type=GT left=<addr-138> right=<addr-139> save_last=0
expr node <addr-138> type=NAME left=(nil) right=(nil) save_last=0 [sample.colour] primary=1
expr node <addr-139> type=INTEGER left=(nil) right=(nil) save_last=0 [200] primary=1
expr node <addr-140> type=COLON left=<addr-141> right=<addr-142> save_last=0
expr node <addr-141> type=NAME left=(nil) right=(nil) save_last=0 [sample.ulong.hundred] primary=1
expr node <addr-142> type=NAME left=(nil) right=(nil) save_last=0 [sample.ulong.ten] primary=1
pmRegisterDerived: name="a.err.m9" expr="sample.string.hullo ? 1 : 2"
derive_lex() -> type=L_NAME "sample.string.hullo"
derive_lex() -> type=L_QUEST "?"
derive_lex() -> type=L_INTEGER "1"
derive_lex() -> type=L_COLON ":"
derive_lex() -> type=L_INTEGER "2"
derive_lex() -> type=L_EOS ""
pmRegisterDerived: global metric[18] a.err.m9 = sample.string.hullo ? 1 : 2
Derived metric expr dump from <addr-143>...
expr node <addr-143> type=QUEST left=<addr-144> right=<addr-145> save_last=0
expr node <addr-144> type=NAME left=(nil) right=(nil) save_last=0 [sample.string.hullo] primary=1
expr node <addr-145> type=COLON left=<addr-146> right=<addr-147> save_last=0
expr node <addr-146> type=INTEGER left=(nil) right=(nil) save_last=0 [1] primary=1
expr node <addr-147> type=INTEGER left=(nil) right=(nil) save_last=0 [2] primary=1
__dmopencontext(->ctx 0) called, 19 derived metrics
__dmgetpmid: metric "a.m1" -> PMID 511.0.3
__dmtraverse: name="a" added "a.m1"
__dmgetpmid: metric "a.m2" -> PMID 511.0.4
__dmtraverse: name="a" added "a.m2"
__dmgetpmid: metric "a.m3" -> PMID 511.0.5
__dmtraverse: name="a" added "a.m3"
__dmgetpmid: metric "a.m4" -> PMID 511.0.6
__dmtraverse: name="a" added "a.m4"
__dmgetpmid: metric "a.m5" -> PMID 511.0.7
__dmtraverse: name="a" added "a.m5"
__dmgetpmid: metric "a.m6" -> PMID 511.0.8
__dmtraverse: name="a" added "a.m6"
__dmgetpmid: metric "a.m7" -> PMID 511.0.9
__dmtraverse: name="a" added "a.m7"
__dmgetpmid: metric "a.m8" -> PMID 511.0.10
__dmtraverse: name="a" added "a.m8"
__dmgetpmid: metric "a.err.m1" -> PMID 511.0.11
Semantic error: ternary op type: left=64 right=32
Semantic error: derived metric a.err.m1: sample.longlong.ten : sample.bin: Different types for ternary operands
__dmbind: check_expr failed for metric[10] a.err.m1
Derived metric expr dump from <addr-148>...
expr node <addr-148> type=QUEST left=<addr-149> right=<addr-152> save_last=0
    PMID: PM_ID_NULL (0.0.0 from pmDesc) numval: 0
    Data Type: 32-bit int  InDom: 0.0 0x0
    Semantics: ??? (0)  Units: none
expr node <addr-149> type=GT left=<addr-150> right=<addr-151> save_last=0
    PMID: PM_ID_NULL (29.0.6 from pmDesc) numval: 0
    Data Type: 32-bit unsigned int  InDom: 29.2 0x7400002
    Semantics: instant  Units: none
expr node <addr-150> type=NAME left=(nil) right=(nil) save_last=0 [sample.bin] primary=0
    PMID: 29.0.6 (29.0.6 from pmDesc) numval: 0
    Data Type: 32-bit int  InDom: 29.2 0x7400002
    Semantics: instant  Units: none
expr node <addr-151> type=INTEGER left=(nil) right=(nil) save_last=0 [400] primary=0
    PMID: PM_ID_NULL (PM_ID_NULL from pmDesc) numval: 0
    Data Type: 32-bit unsigned int  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: discrete  Units: none
expr node <addr-152> type=COLON left=<addr-153> right=<addr-154> save_last=0
    PMID: PM_ID_NULL (29.0.21 from pmDesc) numval: 0
    Data Type: 64-bit int  InDom: 29.2 0x7400002
    Semantics: instant  Units: none
expr node <addr-153> type=NAME left=(nil) right=(nil) save_last=0 [sample.longlong.ten] primary=0
    PMID: 29.0.21 (29.0.21 from pmDesc) numval: 0
    Data Type: 64-bit int  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: instant  Units: none
expr node <addr-154> type=NAME left=(nil) right=(nil) save_last=0 [sample.bin] primary=0
    PMID: 29.0.6 (29.0.6 from pmDesc) numval: 0
    Data Type: 32-bit int  InDom: 29.2 0x7400002
    Semantics: instant  Units: none
__dmtraverse: name="a", omitting invalid child "a.err.m1"
__dmgetpmid: metric "a.err.m2" -> PMID 511.0.12
Semantic error: ternary op units (space): left=byte (dim=1 scale=0) right=Kbyte (dim=1 scale=1)
Semantic error: derived metric a.err.m2: sample.byte_ctr : sample.kbyte_ctr: Different units or scale (space) for ternary operands
__dmbind: check_expr failed for metric[11] a.err.m2
Derived metric expr dump from <addr-148>...
expr node <addr-148> type=QUEST left=<addr-156> right=<addr-157> save_last=0
    PMID: PM_ID_NULL (0.0.0 from pmDesc) numval: 0
    Data Type: 32-bit int  InDom: 0.0 0x0
    Semantics: ??? (0)  Units: none
expr node <addr-156> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.one] primary=0
    PMID: 29.0.10 (29.0.10 from pmDesc) numval: 0
    Data Type: 32-bit int  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: instant  Units: none
expr node <addr-157> type=COLON left=<addr-158> right=<addr-159> save_last=0
    PMID: PM_ID_NULL (29.0.81 from pmDesc) numval: 0
    Data Type: 32-bit int  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: counter  Units: byte
expr node <addr-158> type=NAME left=(nil) right=(nil) save_last=0 [sample.byte_ctr] primary=0
    PMID: 29.0.81 (29.0.81 from pmDesc) numval: 0
    Data Type: 32-bit int  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: counter  Units: byte
expr node <addr-159> type=NAME left=(nil) right=(nil) save_last=0 [sample.kbyte_ctr] primary=0
    PMID: 29.0.83 (29.0.83 from pmDesc) numval: 0
    Data Type: 32-bit int  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: counter  Units: Kbyte
__dmtraverse: name="a", omitting invalid child "a.err.m2"
__dmgetpmid: metric "a.err.m3" -> PMID 511.0.13
Semantic error: ternary op type: left=32 right=STRING
Semantic error: derived metric a.err.m3: sample.bin : sample.lights: Different types for ternary operands
__dmbind: check_expr failed for metric[12] a.err.m3
Derived metric expr dump from <addr-148>...
expr node <addr-148> type=QUEST left=<addr-156> right=<addr-157> save_last=0
    PMID: PM_ID_NULL (0.0.0 from pmDesc) numval: 0
    Data Type: 32-bit int  InDom: 0.0 0x0
    Semantics: ??? (0)  Units: none
expr node <addr-156> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.one] primary=0
    PMID: 29.0.10 (29.0.10 from pmDesc) numval: 0
    Data Type: 32-bit int  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: instant  Units: none
expr node <addr-157> type=COLON left=<addr-158> right=<addr-159> save_last=0
    PMID: PM_ID_NULL (29.0.6 from pmDesc) numval: 0
    Data Type: 32-bit int  InDom: 29.2 0x7400002
    Semantics: instant  Units: none
expr node <addr-158> type=NAME left=(nil) right=(nil) save_last=0 [sample.bin] primary=0
    PMID: 29.0.6 (29.0.6 from pmDesc) numval: 0
    Data Type: 32-bit int  InDom: 29.2 0x7400002
    Semantics: instant  Units: none
expr node <addr-159> type=NAME left=(nil) right=(nil) save_last=0 [sample.lights] primary=0
    PMID: 29.0.46 (29.0.46 from pmDesc) numval: 0
    Data Type: string  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: discrete  Units: none
__dmtraverse: name="a", omitting invalid child "a.err.m3"
__dmgetpmid: metric "a.err.m4" -> PMID 511.0.14
Semantic error: ternary op indom: left=29.2 right=29.1
Semantic error: derived metric a.err.m4: sample.bin : sample.colour: Different instance domains for ternary operands
__dmbind: check_expr failed for metric[13] a.err.m4
Derived metric expr dump from <addr-148>...
expr node <addr-148> type=QUEST left=<addr-156> right=<addr-157> save_last=0
    PMID: PM_ID_NULL (0.0.0 from pmDesc) numval: 0
    Data Type: 32-bit int  InDom: 0.0 0x0
    Semantics: ??? (0)  Units: none
expr node <addr-156> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.one] primary=0
    PMID: 29.0.10 (29.0.10 from pmDesc) numval: 0
    Data Type: 32-bit int  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: instant  Units: none
expr node <addr-157> type=COLON left=<addr-158> right=<addr-159> save_last=0
    PMID: PM_ID_NULL (29.0.6 from pmDesc) numval: 0
    Data Type: 32-bit int  InDom: 29.2 0x7400002
    Semantics: instant  Units: none
expr node <addr-158> type=NAME left=(nil) right=(nil) save_last=0 [sample.bin] primary=0
    PMID: 29.0.6 (29.0.6 from pmDesc) numval: 0
    Data Type: 32-bit int  InDom: 29.2 0x7400002
    Semantics: instant  Units: none
expr node <addr-159> type=NAME left=(nil) right=(nil) save_last=0 [sample.colour] primary=0
    PMID: 29.0.5 (29.0.5 from pmDesc) numval: 0
    Data Type: 32-bit int  InDom: 29.1 0x7400001
    Semantics: instant  Units: none
__dmtraverse: name="a", omitting invalid child "a.err.m4"
__dmgetpmid: metric "a.err.m5" -> PMID 511.0.15
Semantic error: ternary op semantics: left=counter right=instant
Semantic error: derived metric a.err.m5: sample.seconds : sample.ulong.ten: Different semantics for ternary operands
__dmbind: check_expr failed for metric[14] a.err.m5
Derived metric expr dump from <addr-148>...
expr node <addr-148> type=QUEST left=<addr-156> right=<addr-157> save_last=0
    PMID: PM_ID_NULL (0.0.0 from pmDesc) numval: 0
    Data Type: 32-bit int  InDom: 0.0 0x0
    Semantics: ??? (0)  Units: none
expr node <addr-156> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.one] primary=0
    PMID: 29.0.10 (29.0.10 from pmDesc) numval: 0
    Data Type: 32-bit int  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: instant  Units: none
expr node <addr-157> type=COLON left=<addr-158> right=<addr-159> save_last=0
    PMID: PM_ID_NULL (29.0.2 from pmDesc) numval: 0
    Data Type: 32-bit unsigned int  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: counter  Units: sec
expr node <addr-158> type=NAME left=(nil) right=(nil) save_last=0 [sample.seconds] primary=0
    PMID: 29.0.2 (29.0.2 from pmDesc) numval: 0
    Data Type: 32-bit unsigned int  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: counter  Units: sec
expr node <addr-159> type=NAME left=(nil) right=(nil) save_last=0 [sample.ulong.ten] primary=0
    PMID: 29.0.94 (29.0.94 from pmDesc) numval: 0
    Data Type: 32-bit unsigned int  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: instant  Units: none
__dmtraverse: name="a", omitting invalid child "a.err.m5"
__dmgetpmid: metric "a.err.m6" -> PMID 511.0.16
Semantic error: ternary op units (time): left=byte / sec right=byte / hour
Semantic error: derived metric a.err.m6: sample.byte_rate : sample.byte_rate_perhour: Different units or scale (time) for ternary operands
__dmbind: check_expr failed for metric[15] a.err.m6
Derived metric expr dump from <addr-148>...
expr node <addr-148> type=QUEST left=<addr-156> right=<addr-157> save_last=0
    PMID: PM_ID_NULL (0.0.0 from pmDesc) numval: 0
    Data Type: 32-bit int  InDom: 0.0 0x0
    Semantics: ??? (0)  Units: none
expr node <addr-156> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.one] primary=0
    PMID: 29.0.10 (29.0.10 from pmDesc) numval: 0
    Data Type: 32-bit int  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: instant  Units: none
expr node <addr-157> type=COLON left=<addr-158> right=<addr-159> save_last=0
    PMID: PM_ID_NULL (29.0.82 from pmDesc) numval: 0
    Data Type: 32-bit int  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: instant  Units: byte / sec
expr node <addr-158> type=NAME left=(nil) right=(nil) save_last=0 [sample.byte_rate] primary=0
    PMID: 29.0.82 (29.0.82 from pmDesc) numval: 0
    Data Type: 32-bit int  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: instant  Units: byte / sec
expr node <addr-159> type=NAME left=(nil) right=(nil) save_last=0 [sample.byte_rate_perhour] primary=0
    PMID: 29.0.85 (29.0.85 from pmDesc) numval: 0
    Data Type: 32-bit int  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: instant  Units: byte / hour
__dmtraverse: name="a", omitting invalid child "a.err.m6"
__dmgetpmid: metric "a.err.m7" -> PMID 511.0.17
Semantic error: ternary op units (count): left= right=count
Semantic error: derived metric a.err.m7: sample.long.hundred : sample.step: Different units or scale (count) for ternary operands
__dmbind: check_expr failed for metric[16] a.err.m7
Derived metric expr dump from <addr-148>...
expr node <addr-148> type=QUEST left=<addr-156> right=<addr-157> save_last=0
    PMID: PM_ID_NULL (0.0.0 from pmDesc) numval: 0
    Data Type: 32-bit int  InDom: 0.0 0x0
    Semantics: ??? (0)  Units: none
expr node <addr-156> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.one] primary=0
    PMID: 29.0.10 (29.0.10 from pmDesc) numval: 0
    Data Type: 32-bit int  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: instant  Units: none
expr node <addr-157> type=COLON left=<addr-158> right=<addr-159> save_last=0
    PMID: PM_ID_NULL (29.0.12 from pmDesc) numval: 0
    Data Type: 32-bit int  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: instant  Units: none
expr node <addr-158> type=NAME left=(nil) right=(nil) save_last=0 [sample.long.hundred] primary=0
    PMID: 29.0.12 (29.0.12 from pmDesc) numval: 0
    Data Type: 32-bit int  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: instant  Units: none
expr node <addr-159> type=NAME left=(nil) right=(nil) save_last=0 [sample.step] primary=0
    PMID: 29.0.8 (29.0.8 from pmDesc) numval: 0
    Data Type: 32-bit int  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: instant  Units: count
__dmtraverse: name="a", omitting invalid child "a.err.m7"
__dmgetpmid: metric "a.err.m8" -> PMID 511.0.18
Semantic error: derived metric a.err.m8: <expr> ? sample.ulong.hundred : sample.ulong.ten: Non-scalar ternary guard with scalar expressions
__dmbind: check_expr failed for metric[17] a.err.m8
Derived metric expr dump from <addr-148>...
expr node <addr-148> type=QUEST left=<addr-156> right=<addr-189> save_last=0
    PMID: PM_ID_NULL (0.0.0 from pmDesc) numval: 0
    Data Type: 32-bit int  InDom: 0.0 0x0
    Semantics: ??? (0)  Units: none
expr node <addr-156> type=GT left=<addr-187> right=<addr-158> save_last=0
    PMID: PM_ID_NULL (29.0.5 from pmDesc) numval: 0
    Data Type: 32-bit unsigned int  InDom: 29.1 0x7400001
    Semantics: instant  Units: none
expr node <addr-187> type=NAME left=(nil) right=(nil) save_last=0 [sample.colour] primary=0
    PMID: 29.0.5 (29.0.5 from pmDesc) numval: 0
    Data Type: 32-bit int  InDom: 29.1 0x7400001
    Semantics: instant  Units: none
expr node <addr-158> type=INTEGER left=(nil) right=(nil) save_last=0 [200] primary=0
    PMID: PM_ID_NULL (PM_ID_NULL from pmDesc) numval: 0
    Data Type: 32-bit unsigned int  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: discrete  Units: none
expr node <addr-189> type=COLON left=<addr-190> right=<addr-191> save_last=0
    PMID: PM_ID_NULL (29.0.95 from pmDesc) numval: 0
    Data Type: 32-bit unsigned int  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: instant  Units: none
expr node <addr-190> type=NAME left=(nil) right=(nil) save_last=0 [sample.ulong.hundred] primary=0
    PMID: 29.0.95 (29.0.95 from pmDesc) numval: 0
    Data Type: 32-bit unsigned int  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: instant  Units: none
expr node <addr-191> type=NAME left=(nil) right=(nil) save_last=0 [sample.ulong.ten] primary=0
    PMID: 29.0.94 (29.0.94 from pmDesc) numval: 0
    Data Type: 32-bit unsigned int  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: instant  Units: none
__dmtraverse: name="a", omitting invalid child "a.err.m8"
__dmgetpmid: metric "a.err.m9" -> PMID 511.0.19
Semantic error: derived metric a.err.m9: sample.string.hullo ? 1 : 2: Non-arithmetic operand for ternary guard
__dmbind: check_expr failed for metric[18] a.err.m9
Derived metric expr dump from <addr-148>...
expr node <addr-148> type=QUEST left=<addr-156> right=<addr-157> save_last=0
    PMID: PM_ID_NULL (0.0.0 from pmDesc) numval: 0
    Data Type: 32-bit int  InDom: 0.0 0x0
    Semantics: ??? (0)  Units: none
expr node <addr-156> type=NAME left=(nil) right=(nil) save_last=0 [sample.string.hullo] primary=0
    PMID: 29.0.31 (29.0.31 from pmDesc) numval: 0
    Data Type: string  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: instant  Units: none
expr node <addr-157> type=COLON left=<addr-158> right=<addr-159> save_last=0
    PMID: PM_ID_NULL (PM_ID_NULL from pmDesc) numval: 0
    Data Type: 32-bit unsigned int  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: discrete  Units: none
expr node <addr-158> type=INTEGER left=(nil) right=(nil) save_last=0 [1] primary=0
    PMID: PM_ID_NULL (PM_ID_NULL from pmDesc) numval: 0
    Data Type: 32-bit unsigned int  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: discrete  Units: none
expr node <addr-159> type=INTEGER left=(nil) right=(nil) save_last=0 [2] primary=0
    PMID: PM_ID_NULL (PM_ID_NULL from pmDesc) numval: 0
    Data Type: 32-bit unsigned int  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: discrete  Units: none
__dmtraverse: name="a", omitting invalid child "a.err.m9"
__dmgetpmid: metric "a.m1" -> PMID 511.0.3
__dmgetpmid: metric "a.m2" -> PMID 511.0.4
__dmgetpmid: metric "a.m3" -> PMID 511.0.5
__dmgetpmid: metric "a.m4" -> PMID 511.0.6
__dmgetpmid: metric "a.m5" -> PMID 511.0.7
__dmgetpmid: metric "a.m6" -> PMID 511.0.8
__dmgetpmid: metric "a.m7" -> PMID 511.0.9
__dmgetpmid: metric "a.m8" -> PMID 511.0.10

a.m1
    Data Type: 64-bit unsigned int  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: instant  Units: none
    value 10

a.m2
    Data Type: 64-bit unsigned int  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: instant  Units: none
    value 100

a.m3
    Data Type: 32-bit int  InDom: 29.2 0x7400002
    Semantics: instant  Units: none
    inst [100 or "bin-100"] value 100
    inst [200 or "bin-200"] value 200
    inst [300 or "bin-300"] value 300
    inst [400 or "bin-400"] value 400
    inst [500 or "bin-500"] value 0
    inst [600 or "bin-600"] value 0
    inst [700 or "bin-700"] value 0
    inst [800 or "bin-800"] value 0
    inst [900 or "bin-900"] value 0

a.m4
    Data Type: 32-bit int  InDom: 29.2 0x7400002
    Semantics: instant  Units: none
    inst [100 or "bin-100"] value 100
    inst [200 or "bin-200"] value 200
    inst [300 or "bin-300"] value 300
    inst [400 or "bin-400"] value 400
    inst [500 or "bin-500"] value 10
    inst [600 or "bin-600"] value 10
    inst [700 or "bin-700"] value 10
    inst [800 or "bin-800"] value 10
    inst [900 or "bin-900"] value 10

a.m5
    Data Type: 32-bit int  InDom: 29.2 0x7400002
    Semantics: instant  Units: none
    inst [100 or "bin-100"] value 100
    inst [200 or "bin-200"] value 200
    inst [300 or "bin-300"] value 300
    inst [400 or "bin-400"] value 400
    inst [500 or "bin-500"] value 500
    inst [600 or "bin-600"] value 600
    inst [700 or "bin-700"] value 700
    inst [800 or "bin-800"] value 800
    inst [900 or "bin-900"] value 900

a.m6
    Data Type: 32-bit int  InDom: 29.2 0x7400002
    Semantics: instant  Units: none
    inst [100 or "bin-100"] value 100
    inst [200 or "bin-200"] value 10
    inst [300 or "bin-300"] value 10
    inst [400 or "bin-400"] value 10
    inst [500 or "bin-500"] value 500
    inst [600 or "bin-600"] value 10
    inst [700 or "bin-700"] value 10
    inst [800 or "bin-800"] value 10
    inst [900 or "bin-900"] value 900

a.m7
    Data Type: 32-bit int  InDom: 29.2 0x7400002
    Semantics: instant  Units: none
    inst [100 or "bin-100"] value 100
    inst [200 or "bin-200"] value 10
    inst [300 or "bin-300"] value 10
    inst [400 or "bin-400"] value 10
    inst [500 or "bin-500"] value 500
    inst [600 or "bin-600"] value 10
    inst [700 or "bin-700"] value 10
    inst [800 or "bin-800"] value 10
    inst [900 or "bin-900"] value 900

a.m8
    Data Type: double  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: instant  Units: none
No value(s) available!
expecting ...
a.m1		10
a.m2		100
a.m3		100 200 300 400 0 0 0 0 0
a.m4		100 200 300 400 10 10 10 10 10
a.m5		100 200 300 400 500 600 700 800 900
a.m6		100 10 10 10 500 10 10 10 900
a.m7		100 10 10 10 500 10 10 10 900
a.err.m1	<expr2> and <expr3> different types
a.err.m2	<expr2> and <expr3> different units (space)
a.err.m3	<expr2> and <expr3> different types
a.err.m4	<expr2> and <expr3> different indoms
a.err.m5	<expr2> and <expr3> different semantics
a.err.m6	<expr2> and <expr3> different units (time)
a.err.m7	<expr2> and <expr3> different units (count)
a.err.m8	<expr1> with indom, <expr2> and <expr3> singular
a.err.m9	<expr1> not arithmetic
