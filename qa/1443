#!/bin/sh
# PCP QA Test No. 1443
# primary pmie successfully follows hostname changes
#
# Copyright (c) 2023 Ken McDonell.  All Rights Reserved.
#

if [ $# -eq 0 ]
then
    seq=`basename $0`
    echo "QA output created by $seq"
else
    # use $seq from caller, unless not set
    [ -n "$seq" ] || seq=`basename $0`
    echo "QA output created by `basename $0` $*"
fi

# get standard environment, filters and checks
. ./common.product
. ./common.filter
. ./common.check

oldhostname=`hostname`
newhostname="boofa-$seq"

if grep "^$oldhostname\$" qa_hosts >/dev/null
then
    _notrun "$oldhostname is too precious to change hostname"
    # NOTREACHED
fi

# need systemd's autorestart to get pmie restarted quickly
# ... cron-based restart takes too long for a QA test
#
which systemctl >/dev/null 2>&1 || _notrun "no systemd"

# wait until the primary pmie's pid is != $1
#
# In pmie's config.default, the most frequent rule evaluation is once
# every 2 mins (sigh) ... pmie only sees PMCD_HOSTNAME_CHANGE from the
# pmFetch(), so it could be up to 120 seconds before the old pmie notices
# it has to exit, then systemd needs time to notice and restart pmie
#
_wait_for_new_pmie()
{
    max_delay=122
    i=0
    while [ $i -lt $max_delay ]
    do
	pid=`cat $PCP_RUN_DIR/pmie.pid 2>/dev/null`
	[ -n "$pid" -a "$pid" != "$1" ] && break
	sleep 1
	i=`expr $i + 1`
    done
    if [ -n "$pid" -a "$pid" != "$1" ]
    then
	: OK
    else
	echo "Arrgh: failed to see new pmie after $max_delay seconds"
	ls -l $PCP_RUN_DIR/pmie.pid
	ls -l $PCP_TMP_DIR/pmie
	$PCP_PS_PROG $PCP_PS_ALL_FLAGS | grep -E '[P]PID|pmie'
	status=1
    fi
}

_cleanup()
{
    cd $here
    $sudo rm -rf $tmp $tmp.*
    if [ "`hostname`" != "$oldhostname" ]
    then
	$sudo hostname "$oldhostname"
	_wait_for_new_pmie "$newpid"
    fi
}

status=0	# success is the default!
$sudo rm -rf $tmp $tmp.* $seq.full
trap "_cleanup; exit \$status" 0 1 2 3 15

# need primary pmie running
#
pminfo -f pmcd.pmie.pmcd_host >$tmp.pminfo
if grep "0 or \"primary\"" <$tmp.pminfo >/dev/null
then
    :
else
    cat $tmp.pminfo >>$seq.full
    _notrun "primary pmie not running"
    # NOTREACHED
fi

if [ -f $PCP_RUN_DIR/pmie.pid ]
then
    oldpid=`cat $PCP_RUN_DIR/pmie.pid`
    echo "old pid: $oldpid" >>$seq.full
else
    _notrun "$PCP_RUN_DIR/pmie.pid not found for old primary pmie"
    # NOTREACHED
fi

_filter()
{
    sed \
	-e "s@$tmp@TMP@g" \
	-e "s@$PCP_LOG_DIR@PCP_LOG_DIR@" \
	-e "s@$PCP_VAR_DIR@PCP_VAR_DIR@" \
	-e "s/$oldhostname/OLDHOSTNAME/g" \
	-e "s/$newhostname/NEWHOSTNAME/g" \
    # end
}

# real QA test starts here
if [ ! -f $PCP_TMP_DIR/pmie/$oldpid ]
then
    echo "Arrgh: no tracking file in $PCP_TMP_DIR for old primary pmie"
    ls -l $PCP_TMP_DIR/pmie
    status=1
    exit
fi
$PCP_BINADM_DIR/pmiestatus $PCP_TMP_DIR/pmie/$oldpid \
| _filter

echo
echo "Change hostname ..."
sudo hostname "$newhostname"
_wait_for_new_pmie "$oldpid"

if [ -f $PCP_RUN_DIR/pmie.pid ]
then
    newpid=`cat $PCP_RUN_DIR/pmie.pid`
    echo "new pid: $newpid" >>$seq.full
else
    echo "$PCP_RUN_DIR/pmie.pid not found for new primary pmie"
    status=1
    exit
fi

if [ ! -f $PCP_TMP_DIR/pmie/$newpid ]
then
    echo "Arrgh: no tracking file in $PCP_TMP_DIR for new primary pmie"
    ls -l $PCP_TMP_DIR/pmie
    status=1
    exit
fi
$PCP_BINADM_DIR/pmiestatus $PCP_TMP_DIR/pmie/$newpid \
| _filter

# success, all done
exit
